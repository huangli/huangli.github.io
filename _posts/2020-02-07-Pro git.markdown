---
layout: post
title: "Pro git 笔记"
date: 2020-02-06 6:34:37
tags: git 英文原版
categories: 读书笔记
---
{% include ext/toc %}

# 参考资料

- [Atassian git tutorials](https://www.atlassian.com/git/tutorials/making-a-pull-request)
- [Pro Git](https://git-scm.com/book/en/v2/)
- Git 在 ZSH 下的快捷操作 [zsh git cheatsheet](https://github.com/ohmyzsh/ohmyzsh/wiki/Cheatsheet#git)

# 1. What is git

- To be efficient, if files have not changed, Git doesn’t store the file again, just a link to the previous identical file it has already stored. Git thinks about its data more like a stream of snapshots.
- states
    + **Modified** means that you have changed the file but have not committed it to your database yet
    + **Staged** means that you have marked a modified file in its current version to go into your next commit snapshot
    + **Committed** means that the data is safely stored in your local database
- modified 就是你现在已经外出了，可能已经被病毒感染了，staged 就是已经进了医院观察治疗，committed 就是通过试剂确认无毒无害。

## 1.1 Global config 

- /etc/gitconfig
- ~/.gitconfig or ~/.config/git/config
- .git/config
- Each level overrides values in the previous level, so values in .git/config trump those in /etc/gitconfig


## 1.2 Your Identity

```terminal 
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
```


## 1.3 Help 

```terminal
$ git help <verb>
$ git <verb> --help
$ man git-<verb>
$ git add -h
```

- you can ask for the more concise “help” output with the -h option, as in


# 2. Git Basics

> 基本操作

## 2.2 Recording Changes to the Repository

- You typically obtain a Git repository in one of two ways:
    + You can take a local directory that is currently not under version control, and turn it into a Git repository, or
    + You can clone an existing Git repository from elsewhere.

```terminal
$ git clone https://github.com/libgit2/libgit2

# If you want to clone the repository into a directory named something other than libgit2
$ git clone https://github.com/libgit2/libgit2 mylibgit
```

- $ git status -s (more simplified)
- .gitignore 包含不需要track的文件，可以用正则

```terminal
Here is another example .gitignore file:

# ignore all .a files
*.a

# but do track lib.a, even though you're ignoring .a files above
!lib.a

# only ignore the TODO file in the current directory, not subdir/TODO
/TODO

# ignore all files in any directory named build
build/

# ignore doc/notes.txt, but not doc/server/arch.txt
doc/*.txt

# ignore all .pdf files in the doc/ directory and any of its subdirectories
doc/**/*.pdf

# [https://github.com/github/gitignore](https://github.com/github/gitignore)
```


- --staged and --cached are synonyms
- git commit -am (-a 自动stag文件)
- git rm 删除文件
- 文件移动git不追踪
- git mv is one command instead of three
    + $ mv README.md README
    + $ git rm README.md
    + $ git add README

## 2.3 Viewing the Commit History

> 对于团队来说 log history 就是发现谁引入了问题

- git log(之前忘记commit的是什么版本的时候，可以使用)
- git log -p -2(最近两次commit有啥不同)
- git log --stat(简单版本)
- git log --pretty=format:"%h - %an, %ar : %s" (alias gh='git log'，方便以后看)
- git log --since=2.weeks (可以通过时间筛选--since, --after, --until, --before, --grep)
- git log -S function_name (根据名称来匹配)

```terminal
# 大型项目，谁的代码引入了问题，直接通过 log 查看非常方便

$ git log --pretty="%h - %s" --author='Junio C Hamano' --since="2008-10-01" \
   --before="2008-11-01" --no-merges -- t/
5610e3b - Fix testcase failure when extended attributes are in use
acd3b9e - Enhance hold_lock_file_for_{update,append}() API
f563754 - demonstrate breakage of detached checkout with symbolic link HEAD
d1a43f2 - reset --hard/read-tree --reset -u: remove unmerged new paths
51a94af - Fix "checkout --track -b newbranch" on detached HEAD
b0ad11e - pull: allow "git pull origin $something:$current_branch" into an unborn branch
```


## 2.4 Undoing Things

> 如果是自己忘记了某些文件，可以再加一个commit，如果团队的话每一个commit 都要有意义，最好不要加上版本号，让整个版本看起来更麻烦

合并commit
```terminal
# 第二次的 commit 会代替第一次,第一次不会出现在repository history中
$ git commit -m 'initial commit'
$ git add forgotten_file
$ git commit --amend
```

让文件变成unstaged 状态
```terminal
$ git reset HEAD CONTRIBUTING.md
```


## 2.5 Working with Remotes

> 本地多个远程仓库，如何操作？没明白，岂不是容易混乱

### Show your remote
```terminal
$ git remote (gr)
$ git remote -v (gr -v)
```

###  Adding remote repositories
```terminal
$ git remote add pb https://github.com/paulboone/ticgit
$ git remote -v
```

### Fetching and Pulling from Your Remotes
```terminal
# git fetch command only downloads the data to your local repository — it doesn’t automatically merge it with any of your work or modify what you’re currently working on. 
$ git fetch <remote>

#  git pull command to automatically fetch and then merge that remote branch into your current branch.
$ git pull
```

### Pushing to remotes

```terminal
# This command works only if you cloned from a server to which you have write access and if nobody has pushed in the meantime.
$ git push origin master
```

### Inspecting a Remote
```terminal
$ git remote show origin (gr show origin)
```

### Renaming and Removing Remotes
```terminal
$ git remote rename pb paul
$ git remote
origin
paul
```

```terminal
$ git remote remove paul
$ git remote
origin
```


## 2.6 Tagging

- Like most VCSs, Git has the ability to tag specific points in a repository’s history as being important. Typically, people use this functionality to mark release points (v1.0, v2.0 and so on). 

### Creating tags
- A **lightweight** tag is very much like a branch that doesn’t change — it’s just a pointer to a specific commit
- Annotated tags, however, are stored as full objects in the Git database.

### Annotated Tags
```terminal
$ git tag -a v1.4 -m "my version 1.4"
$ git show v1.4

#把之前的历史记录标记
$ git tag -a v1.2 9fceb02
```

### Lightweight Tags
```terminal
$ git tag v1.4-lw
$ git tag
```

### Sharing Tags
```terminal
$ git push origin v1.5
$ git push origin --tags
```

### Deleting Tags
```terminal
# 本地删除
$ git tag -d v1.4-lw
# server 删除
$ git push origin --delete <tagname>
```

### Checking out Tags
```terminal
# (2.0.0 就是一个tag)
$ git checkout 2.0.0 
```


# 3. Git Branching

## 3.1 Branches in a Nutterminal

git init 只是默认创建一个master branch，并没有什么特殊的，也可以命名成别的

### Creating a New Branch
```terminal
# 创建了新的branch，指针 HEAD 指向当前正在指向的分支
$ git branch testing

# 看当前指针指向
$ git log --oneline --decorate
    52c9468 (HEAD -> master, testing) master v1.0
    183208e test
```


### Switching Branches

a branch in Git is actually a simple file that contains the 40 character SHA-1 checksum of the commit it points to. 如果同一份文件有改动， git 如何处理？
```terminal
$ git checkout testing (gco testing, gcm 是直接到 master)
$ gst
On branch testing
nothing to commit, working tree clean

# 这个时候 testing branch 的文件比 master 多一个
$ vim test.rb
$ ga .
$ gc -m "testing branch, first commit"

# 看commit 记录
$ git log --oneline --decorate --graph --all

# Creating a new branch and switching to it at the same time
git checkout -b (gcb)
```

## 3.2 Basic Branching and Merging

真实工作场景
```terminal
$ git checkout -b iss53

# This is shorthand for:
$ git branch iss53
$ git checkout iss53
```
###  Create a branch to add the hotfix.

```terminal
$ git checkout -b hotfix
Switched to a new branch 'hotfix'
$ vim index.html
$ git commit -a -m 'fixed the broken email address'
[hotfix 1fb7853] fixed the broken email address
 1 file changed, 2 insertions(+)
```
###  After it’s tested, merge the hotfix branch, and push to production.

```terminal
$ git checkout master
$ git merge hotfix
Updating f42c576..3a0874c
Fast-forward
 index.html | 2 ++
 1 file changed, 2 insertions(+)

# 删除hotfix
$ git branch -d hotfix
Deleted branch hotfix (3a0874c).
```

###  Switch back to your original user story and continue working.

```terminal
$ git checkout master
Switched to branch 'master'
$ git merge iss53
Merge made by the 'recursive' strategy.
index.html |    1 +
1 file changed, 1 insertion(+)

```

### Basic Merge Conflicts

同一个文件的修改就很有可能碰到merge 不了，要仔细对比
```terminal
# visual merge tool and walks you through the conflicts
$ git mergetool
```

## 3.3 Branch Management

```terminal
# merged 和 no-merged 可以看branch 情况，先要到master ，如果已经merge 就可以删除没用的 branch, 如果没用merge , git branch -d 会失败
$ git branch --no-merged
$ git branch --merged

# 如果不想checkout
$ git branch --no-merged master
```

## 3.4 Branching Workflows

- Many Git developers have a workflow that embraces this approach, such as having only code that is entirely stable in their master branch — possibly only code that has been or will be released. They have another parallel branch named develop or next that they work from or use to test stability
- When you’re branching and merging, everything is being done only in your Git repository — there is no communication with the server

## 3.5 Remote Branches

```terminal
# 显示remote 的branch
$ git ls-remote
```

```terminal
# origin” is the default name for a remote when you run git clone. 
# booyah/master 如果执行下面的命令，origin 就被替换了
$ git clone -o booyah
```

### Fetch

强制fetch, 参考 [W3doc](https://www.w3docs.com/snippets/git/how-to-force-git-pull-to-override-local-files.html)
```terminal
# To synchronize your work with a given remote, 所有的分支都会下载
$ git fetch origin
# 下载某一个分支
$ git fetch origin test

$ git checkout master
$ git branch new-branch-to-save-current-commits
$ 
$ git fetch --all
$ git reset --hard origin/master
```

### Pushing

Git 可以强制 push，参考 [stackoverflow](https://stackoverflow.com/questions/5509543/how-do-i-properly-force-a-git-push)
```terminal
# git push <remote> <branch>
git push origin serverfix

$ git push origin <your_branch_name> -f
```

## 3.6 Rebasing

- In Git, there are two main ways to integrate changes from one branch into another: the merge and the rebase
- rebasing makes for a cleaner history, 让整个脉络更加清晰，但是也隐藏了历史。Merge 则不同，如实反应，但是可能路径比较乱
- ou should never rebase commits once they've been pushed to a public repository
```terminal
$ git checkout experiment
$ git rebase master
First, rewinding head to replay your work on top of it...
Applying: added staged command
```

# 5. Distributed Git

## 5.1 Distributed Workflows

### Centralized Workflow

![Centralized workflow](https://git-scm.com/book/en/v2/images/centralized_workflow.png)
- This concept is as true in Git as it is in Subversion (or any CVCS), and this model works perfectly well in Git.
- With Git’s branching model, it’s possible for hundreds of developers to successfully work on a single project through dozens of branches simultaneously.

### Integration-Manager Workflow

![Integration-manager workflow](https://git-scm.com/book/en/v2/images/integration-manager.png)

-  One of the main advantages of this approach is that you can continue to work, and the maintainer of the main repository can pull in your changes at any time
-  这就是 GitHub 的方式， fork 一下开始自己的project， 每个人有自己独立的，也可以相互 pull

### Dictator and Lieutenants Workflow

![Dictator](https://git-scm.com/book/en/v2/images/benevolent-dictator.png)
- One famous example is the Linux kernel
- This kind of workflow isn’t common, but can be useful in very big projects, or in highly hierarchical environments. 
